
services:
  # Configuration pour PHP avec Xdebug
  php:
    build:
      context: ./docker/php
      args:
        - TIMEZONE=${TIMEZONE:-Europe/Paris}
    volumes:
      - .:/var/www/html:cached
      - ./docker/php/conf.d:/usr/local/etc/php/conf.d:ro
      - ./var/log:/var/www/html/var/log
      - xdebug_logs:/tmp/xdebug
    environment:
      - XDEBUG_MODE=${XDEBUG_MODE:-debug,develop}
      - XDEBUG_CONFIG=client_host=host.docker.client
      - PHP_IDE_CONFIG=serverName=docker
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app_network
    depends_on:
      - database
      - redis
      - mailpit

  # Configuration pour Nginx avec des paramètres optimisés
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "${NGINX_HTTP_PORT:-8080}:80"
      - "${NGINX_HTTPS_PORT:-8443}:443"
    volumes:
      - .:/var/www/html:cached
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx/logs:/var/log/nginx
      - ./public:/var/www/html/public:ro
    environment:
      - VIRTUAL_HOST=${APP_DOMAIN:-localhost}
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=${APP_DOMAIN:-}
      - LETSENCRYPT_EMAIL=${ADMIN_EMAIL:-admin@example.com}
    networks:
      - app_network
    depends_on:
      - php
    restart: unless-stopped

  # Configuration pour la base de données MySQL
  database:
    image: mysql:8.0
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-symfony_sponsorship}
      MYSQL_USER: ${MYSQL_USER:-app}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-app}
      MYSQL_ROOT_HOST: '%'
      TZ: ${TIMEZONE:-Europe/Paris}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/conf.d:/etc/mysql/conf.d:ro
      - ./docker/mysql/initdb.d:/docker-entrypoint-initdb.d:ro
      - mysql_logs:/var/log/mysql
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-root}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # Configuration pour Redis
  redis:
    image: redis:alpine
    container_name: redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
      - redis_conf:/usr/local/etc/redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Configuration pour Adminer (interface d'administration de base de données)
  adminer:
    image: adminer:latest
    container_name: adminer
    restart: unless-stopped
    environment:
      - ADMINER_DEFAULT_SERVER=database
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    networks:
      - app_network
    depends_on:
      - database

  # Configuration pour MailHog (alternative à Mailpit)
  # mailhog:
  #   image: mailhog/mailhog:latest
  #   container_name: mailhog
  #   ports:
  #     - "1025:1025" # SMTP
  #     - "8025:8025" # Interface web
  #   networks:
  #     - app_network
  #   restart: unless-stopped

# Définition des volumes persistants
volumes:
  mysql_data:
  redis_data:
  mailpit_data:
  xdebug_logs:
  mysql_logs:
  redis_conf:

# Définition des réseaux
networks:
  app_network:
    driver: bridge
